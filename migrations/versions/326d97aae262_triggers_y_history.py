"""triggers_y_history

Revision ID: 326d97aae262
Revises: 7bdb3959db59
Create Date: 2024-11-23 18:40:30.319252

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "326d97aae262"
down_revision: Union[str, None] = "7bdb3959db59"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

analysis_status_enum = postgresql.ENUM(
    "in_progress",
    "completed",
    name="analysisstatusenum",
    create_type=False,
)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "analysis_history",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("analysis_id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("s3_address", sa.String(), nullable=False),
        sa.Column("assigned_operator_id", sa.BigInteger(), nullable=True),
        sa.Column("result", sa.Text(), nullable=True),
        sa.Column("status", analysis_status_enum, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("operation", sa.String(), nullable=False),
        sa.Column(
            "operation_timestamp",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.alter_column(
        "analyses",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "analyses",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "operators",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "operators",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "tokens",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    # ### end Alembic commands ###

    op.execute("""
        CREATE OR REPLACE FUNCTION log_analysis_history()
        RETURNS TRIGGER AS $$
        BEGIN
            IF TG_OP = 'DELETE' THEN
                INSERT INTO analysis_history (
                    analysis_id,
                    user_id,
                    name,
                    s3_address,
                    assigned_operator_id,
                    result,
                    status,
                    created_at,
                    updated_at,
                    operation,
                    operation_timestamp
                ) VALUES (
                    OLD.id,
                    OLD.user_id,
                    OLD.name,
                    OLD.s3_address,
                    OLD.assigned_operator_id,
                    OLD.result,
                    OLD.status,
                    OLD.created_at,
                    OLD.updated_at,
                    'DELETE',
                    NOW()
                );
                RETURN OLD;
            ELSIF TG_OP = 'UPDATE' THEN
                INSERT INTO analysis_history (
                    analysis_id,
                    user_id,
                    name,
                    s3_address,
                    assigned_operator_id,
                    result,
                    status,
                    created_at,
                    updated_at,
                    operation,
                    operation_timestamp
                ) VALUES (
                    NEW.id,
                    NEW.user_id,
                    NEW.name,
                    NEW.s3_address,
                    NEW.assigned_operator_id,
                    NEW.result,
                    NEW.status,
                    NEW.created_at,
                    NEW.updated_at,
                    'UPDATE',
                    NOW()
                );
                RETURN NEW;
            ELSIF TG_OP = 'INSERT' THEN
                INSERT INTO analysis_history (
                    analysis_id,
                    user_id,
                    name,
                    s3_address,
                    assigned_operator_id,
                    result,
                    status,
                    created_at,
                    updated_at,
                    operation,
                    operation_timestamp
                ) VALUES (
                    NEW.id,
                    NEW.user_id,
                    NEW.name,
                    NEW.s3_address,
                    NEW.assigned_operator_id,
                    NEW.result,
                    NEW.status,
                    NEW.created_at,
                    NEW.updated_at,
                    'INSERT',
                    NOW()
                );
                RETURN NEW;
            END IF;
        END;
        $$ LANGUAGE plpgsql;
        """)

    op.execute("""
        CREATE TRIGGER analysis_insert_trigger
        AFTER INSERT ON analyses
        FOR EACH ROW EXECUTE FUNCTION log_analysis_history();
        """)
    op.execute("""
        CREATE TRIGGER analysis_update_trigger
        AFTER UPDATE ON analyses
        FOR EACH ROW EXECUTE FUNCTION log_analysis_history();
        """)
    op.execute("""
        CREATE TRIGGER analysis_delete_trigger
        AFTER DELETE ON analyses
        FOR EACH ROW EXECUTE FUNCTION log_analysis_history();
        """)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "tokens",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "operators",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "operators",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "analyses",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "analyses",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_table("analysis_history")
    # ### end Alembic commands ###
    op.execute("DROP TRIGGER IF EXISTS analysis_insert_trigger ON analyses;")
    op.execute("DROP TRIGGER IF EXISTS analysis_update_trigger ON analyses;")
    op.execute("DROP TRIGGER IF EXISTS analysis_delete_trigger ON analyses;")

    # Drop the trigger function
    op.execute("DROP FUNCTION IF EXISTS log_analysis_history();")

    # Drop the analysis_history table
    op.drop_table("analysis_history")
